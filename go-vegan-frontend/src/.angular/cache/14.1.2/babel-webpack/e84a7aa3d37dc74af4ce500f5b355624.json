{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { Account } from '../../common/account';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/account.service\";\nimport * as i2 from \"../../services/login.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\n\nfunction AccountComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 0)(1, \"td\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\");\n    i0.ɵɵelementStart(4, \"td\", 1);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\", 1);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\", 1);\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 4);\n    i0.ɵɵtext(12, \"View Order Items\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tempOrder_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", tempOrder_r1.id, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(tempOrder_r1.totalQuantity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempOrder_r1.totalPrice);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(10, 5, tempOrder_r1.dateCreated, \"medium\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/orderDetails/\", tempOrder_r1.id, \"\");\n  }\n}\n\nexport class AccountComponent {\n  constructor(accountService, loginService) {\n    this.accountService = accountService;\n    this.loginService = loginService;\n    this.account = new Account(); // pagination properties\n\n    this.thePageNumber = 1;\n    this.thePageSize = 10;\n    this.theTotalElements = 0;\n  }\n\n  ngOnInit() {\n    //this.loginService.share.subscribe(u => this.account = u)\n    this.getLoginAccount().subscribe(() => {\n      this.getAccountByEmailAndPassword().subscribe(() => {\n        this.getOrderDataByAccountId();\n      });\n    });\n  }\n\n  getLoginAccount() {\n    return new Observable(observer => {\n      this.loginService.share.subscribe(u => this.account = u);\n      observer.next();\n    });\n  }\n\n  getAccountByEmailAndPassword() {\n    // for asynchronous execution of functions\n    return new Observable(observer => {\n      this.accountService.getAccount(this.account.email, this.account.password).subscribe(data => {\n        this.account = data;\n        console.log(this.account.id);\n        observer.next();\n      });\n    });\n  }\n\n  getOrderDataByAccountId() {\n    this.accountService.getOrderByAccountIdPaginate(this.thePageNumber - 1, this.thePageSize, this.account.id).subscribe(data => {\n      this.orders = data._embedded.orders;\n      this.thePageNumber = data.page.number + 1;\n      this.thePageSize = data.page.size;\n      this.theTotalElements = data.page.totalElements;\n      console.log(\"the date is \" + this.orders[0].dateCreated);\n    });\n  }\n\n}\n\nAccountComponent.ɵfac = function AccountComponent_Factory(t) {\n  return new (t || AccountComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.LoginService));\n};\n\nAccountComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AccountComponent,\n  selectors: [[\"app-account\"]],\n  decls: 19,\n  vars: 6,\n  consts: [[\"width\", \"50%\"], [\"width\", \"12.5%\"], [\"width\", \"50%\", 4, \"ngFor\", \"ngForOf\"], [3, \"page\", \"pageSize\", \"collectionSize\", \"pageChange\"], [\"width\", \"12.5%\", 3, \"routerLink\"]],\n  template: function AccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"p\");\n      i0.ɵɵelementStart(4, \"table\")(5, \"thead\")(6, \"tr\", 0)(7, \"th\", 1);\n      i0.ɵɵtext(8, \"Order Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\", 1);\n      i0.ɵɵtext(10, \"Total Quantity\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\", 1);\n      i0.ɵɵtext(12, \"Total Price\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"th\", 1);\n      i0.ɵɵtext(14, \"Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"th\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"tbody\");\n      i0.ɵɵtemplate(17, AccountComponent_tr_17_Template, 13, 8, \"tr\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"ngb-pagination\", 3);\n      i0.ɵɵlistener(\"pageChange\", function AccountComponent_Template_ngb_pagination_pageChange_18_listener($event) {\n        return ctx.thePageNumber = $event;\n      })(\"pageChange\", function AccountComponent_Template_ngb_pagination_pageChange_18_listener() {\n        return ctx.getOrderDataByAccountId();\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate2(\"Welcome \", ctx.account.firstName, \" \", ctx.account.lastName, \"\");\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"page\", ctx.thePageNumber)(\"pageSize\", ctx.thePageSize)(\"collectionSize\", ctx.theTotalElements);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.RouterLink, i5.NgbPagination, i3.DatePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhY2NvdW50LmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Observable","Account","i0","AccountComponent","constructor","accountService","loginService","ngOnInit","getLoginAccount","subscribe","getAccountByEmailAndPassword","getOrderDataByAccountId","observer","share","u","account","next","getAccount","email","password","data","console","log","id","getOrderByAccountIdPaginate","thePageNumber","thePageSize","orders","_embedded","page","number","size","theTotalElements","totalElements","dateCreated","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\morped\\documents\\go-vegan-project\\using-spring-rest-repo\\go-vegan\\go-vegan-frontend\\src\\app\\components\\account\\account.component.ts","C:\\Users\\morped\\documents\\go-vegan-project\\using-spring-rest-repo\\go-vegan\\go-vegan-frontend\\src\\app\\components\\account\\account.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\r\nimport { Account } from '../../common/account';\r\nimport { Order } from '../../common/order';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { LoginService } from '../../services/login.service';\r\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n\n\n\n  account = new Account();\n\n  orders: Order[];\n\n  // pagination properties\n  thePageNumber: number = 1;\n  thePageSize: number = 10;\n  theTotalElements: number = 0;\n\n  \n\n  constructor(private accountService: AccountService, private loginService: LoginService) { }\n\n\n\n  ngOnInit(): void {\n    //this.loginService.share.subscribe(u => this.account = u)\n    this.getLoginAccount().subscribe(() => {\n      this.getAccountByEmailAndPassword().subscribe(() => {\n        this.getOrderDataByAccountId();\r\n      });\r\n    });\n    \n  }\n\n  \n  getLoginAccount() {\n\r\n    return new Observable(observer => {\r\n      this.loginService.share.subscribe(u => this.account = u);\r\n      observer.next();\r\n    });\r\n  }\n  \n\n  getAccountByEmailAndPassword() {\n\n    // for asynchronous execution of functions\n    return new Observable(observer => {\n\n      this.accountService.getAccount(this.account.email, this.account.password).subscribe(\r\n        data => {\r\n          this.account = data;\r\n          console.log(this.account.id);\r\n          observer.next();\r\n        }\r\n      )\r\n\r\n    });\r\n  }\n\n  \n  getOrderDataByAccountId() {\n\n    this.accountService.getOrderByAccountIdPaginate(this.thePageNumber - 1, this.thePageSize, this.account.id).subscribe(\n      data => {\n        this.orders = data._embedded.orders;\n        this.thePageNumber = data.page.number + 1;\n        this.thePageSize = data.page.size;\n        this.theTotalElements = data.page.totalElements;\n        console.log(\"the date is \" + this.orders[0].dateCreated);\n      }\n    )\n  }\n\n\n}\n","<div>\r\n  <h3>Welcome {{account.firstName}} {{account.lastName}}</h3>\r\n\r\n  <!--\r\n  <ul>\r\n    <li>{{account.firstName}}</li>\r\n    <li>{{account.lastName}}</li>\r\n    <li>{{account.email}}</li>\r\n  </ul>\r\n  -->\r\n\r\n\r\n  <p></p>\r\n  <table>\r\n    <thead>\r\n      <tr width=\"50%\">\r\n        <th width=\"12.5%\">Order Number</th>\r\n        <th width=\"12.5%\">Total Quantity</th>\r\n        <th width=\"12.5%\">Total Price</th>\r\n        <th width=\"12.5%\">Date</th>\r\n        <th width=\"12.5%\"></th>\r\n\r\n\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr width=\"50%\" *ngFor=\"let tempOrder of orders\">\r\n\r\n        <td width=\"12.5%\">{{tempOrder.id}}\r\n        <td>\r\n        <td width=\"12.5%\">{{tempOrder.totalQuantity}}</td>\r\n        <td width=\"12.5%\">{{tempOrder.totalPrice}}</td>\r\n        <td width=\"12.5%\">{{tempOrder.dateCreated | date: 'medium'}}</td>\r\n        <td routerLink=\"/orderDetails/{{tempOrder.id}}\" width=\"12.5%\">View Order Items</td>\r\n\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n  <ngb-pagination [(page)]=\"thePageNumber\"\r\n                  [pageSize]=\"thePageSize\"\r\n                  [collectionSize]=\"theTotalElements\"\r\n                  (pageChange)=\"getOrderDataByAccountId()\">\r\n\r\n  </ngb-pagination>\r\n\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}